# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Collin Yen
Student ID: 804034634
Email: collinyen7@gmail.com

# Partner 2 (if you're working in a team)
Name: 
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
The method used to execute peer download and upload in parallel was forking.
Everytime we want to upload or download a file we fork the process and have
the child process do the file upload and download while the parent process
continues on with its execution

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
1. If someone requests for a file with a name whose length is larger than
   FILENAMESIZ then it will cause a buffer overrun bug. A fix for this case
   is to detect it and then to terminate the request as we will be unable to
   locate files with names that large. 


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. Fixed the bug where a peer could try to access a file not in the current
   directory. Was able to detect this if they put a '/' inside of the file
   name
2. There is a bug that occurs when many peers are logged in at once. The
   reason for this is because when we send a WANT request a bunch of these
   peers will be returned because they all have the file; however, this will
   fill up our buffer and will cause an error. 
3. Fixed the bug where a peer could send us extremely large files by
   defining a constant MAX_FILE_SIZE equal to 2 GB and terminating the
   download if the file exceeds this limit.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
1. The first attack will upload a continuous stream of data to our victim.
   If they have nothing in place to catch unusually large file sizes then
   this data will eventually fill up their available memory causing their
   system to crash. evil_mode = 1
2. The second attack is to attempt to gain access to a file not in their curent
   directory. In order to do this we change the filename that we are
   requesting to something like /etc/passwd and if they have no security
   precautions in place their code will open the file with that name
   allowing us access to parts in their memory that are not within their
   current directory. evil_mode = 2
3. The third attack is to attempt a buffer overrun with the file name. If done
   properly this would be able to cause a segmentation fault allowing us to
   execute code on their system. However, with the case of this lab we just
   prove that this concept would work and so I did not attempt to pass in
   malicious code. If evil_mode is set to 3 then we will request a file with
   a file name length twice the size of the allocated buffer for the file
   name. evil_mode = 3
4. The fourth attack that we will attempt will be a DDOS attack. The way
   this attack will work is that we will flood the peer with requests for a
   particular file, making it impossible for that peer to accept requests
   from any other peer. evil_mode = 4

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
